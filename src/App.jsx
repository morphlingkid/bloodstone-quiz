import { useState, useEffect, useRef, useCallback } from 'react';
import './App.css';
import { questionsDota } from './questionsDota';
import catImage from './assets/cute-cat.jpg';
import errorSound from './assets/error.mp3';
import successSound from './assets/success.mp3';

function App() {
  const [score, setScore] = useState(0);
  const scoreRef = useRef(score); // –•—Ä–∞–Ω–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π score
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60);
  const [gameOver, setGameOver] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [hearts, setHearts] = useState([]);
  const [userAnswer, setUserAnswer] = useState('');
  const [questionIndices, setQuestionIndices] = useState([]);
  const [errorMessage, setErrorMessage] = useState('');
  const [userName, setUserName] = useState('');
  const [nameError, setNameError] = useState('');

  const saveResultToGoogleSheets = useCallback(async (currentScore) => {
    const dateTime = new Date().toISOString();
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', { name: userName, score: currentScore, dateTime });
    try {
      const response = await fetch('/save-result', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: userName, score: currentScore, dateTime }),
      });
      const result = await response.json();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
      if (!result.success) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', result.error);
        setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–∏–ª–∞—à–∫–∞! üêæ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
      setErrorMessage('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –º–∏–ª–∞—à–∫–∞! üêæ');
    }
  }, [userName, setErrorMessage]);

  useEffect(() => {
    console.log('useEffect: gameStarted=', gameStarted, 'gameOver=', gameOver, 'score=', score);
    if (gameStarted && !gameOver) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 0) {
            console.log('–¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑, score=', scoreRef.current);
            setGameOver(true);
            saveResultToGoogleSheets(scoreRef.current); // –ò—Å–ø–æ–ª—å–∑—É–µ–º scoreRef
            clearInterval(timer);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      const heartInterval = setInterval(() => {
        const newHeart = {
          id: Math.random(),
          left: Math.random() * window.innerWidth,
          top: Math.random() * window.innerHeight,
        };
        setHearts((prev) => [...prev, newHeart].slice(-10));
      }, 2000);

      return () => {
        clearInterval(timer);
        clearInterval(heartInterval);
      };
    }
  }, [gameStarted, gameOver, saveResultToGoogleSheets]);

  useEffect(() => {
    scoreRef.current = score; // –û–±–Ω–æ–≤–ª—è–µ–º scoreRef –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ score
  }, [score]);

  const startGame = () => {
    if (!userName.trim()) {
      setNameError('–í–≤–µ–¥–∏ —Å–≤–æ—ë –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è, –º–∏–ª–∞—à–∫–∞! üòª');
      return;
    }
    setNameError('');
    const indices = [...Array(questionsDota.length).keys()];
    console.log('questionsDota.length:', questionsDota.length);
    console.log('questionIndices:', indices);
    for (let i = indices.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [indices[i], indices[j]] = [indices[j], indices[i]];
    }
    setQuestionIndices(indices);
    setScore(0);
    setGameStarted(true);
  };

  const handleAnswer = () => {
    console.log('handleAnswer –≤—ã–∑–≤–∞–Ω, –≤–æ–ø—Ä–æ—Å:', currentQuestionIndex + 1, 'score=', score);
    console.log('questionsDota.length:', questionsDota.length);
    console.log('questionIndices:', questionIndices);
    const correctAnswers = questionsDota[questionIndices[currentQuestionIndex]].correct;
    const normalizedUserAnswer = userAnswer.toLowerCase().replace(/\s+/g, '');
    let newScore = score;
    if (correctAnswers.some(answer => answer.toLowerCase().replace(/\s+/g, '') === normalizedUserAnswer)) {
      console.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º score:', score + 1);
      newScore = score + 1;
      setScore(newScore);
      setErrorMessage('');
      try {
        const successAudio = new Audio(successSound);
        successAudio.play().catch((error) => {
          console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É—Å–ø–µ—Ö–∞:', error);
        });
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞ —É—Å–ø–µ—Ö–∞:', error);
      }
    } else {
      console.log('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
      setErrorMessage('–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë, –º–∏–ª–∞—à–∫–∞! üêæ');
      try {
        const errorAudio = new Audio(errorSound);
        errorAudio.play().catch((error) => {
          console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏:', error);
        });
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏:', error);
      }
    }
    setUserAnswer('');
    if (currentQuestionIndex + 1 < questionsDota.length) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:', currentQuestionIndex + 2);
    } else {
      console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, –≤—ã–∑–æ–≤ saveResultToGoogleSheets, score=', newScore);
      setGameOver(true);
      saveResultToGoogleSheets(newScore);
    }
  };

  const handleKeyPress = (event) => {
    if (event.key === 'Enter') {
      handleAnswer();
    }
  };

  const handleNameKeyPress = (event) => {
    if (event.key === 'Enter') {
      startGame();
    }
  };

  const restartGame = () => {
    const indices = [...Array(questionsDota.length).keys()];
    for (let i = indices.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [indices[i], indices[j]] = [indices[j], indices[i]];
    }
    setQuestionIndices(indices);
    setScore(0);
    setCurrentQuestionIndex(0);
    setTimeLeft(60);
    setGameOver(false);
    setGameStarted(true);
    setUserAnswer('');
    setErrorMessage('');
  };

  return (
    <div className="quiz-container">
      {hearts.map((heart) => (
        <div
          key={heart.id}
          className="heart"
          style={{ left: heart.left, top: heart.top }}
        >
          üíñ
        </div>
      ))}
      <h1 className="title">Bloodstone</h1>
      {!gameStarted ? (
        <div>
          <img src={catImage} alt="–ú–∏–ª—ã–π –∫–æ—Ç–∏–∫" className="cat-image" />
          <p className="welcome-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω—è—à–Ω—ã–π –∫–≤–∏–∑! üêæ</p>
          <p className="welcome-text">–ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∫–∞–≤–∞–π–Ω–∞—è? üòª</p>
          <input
            type="text"
            value={userName}
            onChange={(e) => setUserName(e.target.value)}
            onKeyPress={handleNameKeyPress}
            className="answer-input"
            placeholder="–í–≤–µ–¥–∏ —Å–≤–æ—ë –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è! :3"
          />
          {nameError && <p className="error-message">{nameError}</p>}
          <button onClick={startGame} className="start-button">
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É! :3
          </button>
        </div>
      ) : gameOver ? (
        <div>
          <h2 className="result-text">–ö–≤–∏–∑ –ø—Ä–æ–π–¥–µ–Ω, {userName}! –ú–æ—è –Ω—è—à–µ—á–∫–∞!!! üéâ</h2>
          <p className="result-text">–¢–≤–æ–π —Å—á—ë—Ç: {score}</p>
          <p className="result-text">
            {score >= 10
              ? "–¢—ã –º–µ–≥–∞-–Ω—è—à–∫–∞ –∏ —É–ª—å—Ç—Ä–∞-—É–º–Ω—è—à–∫–∞, —Å—Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! üòª"
              : score >= 5
              ? "–ö–∞–∫–∞—è —Ç—ã —É–º–Ω–∏—á–∫–∞, –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üíñ"
              : "–ú–∏–ª–∞—à–∫–∞, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! üêæ"}
          </p>
          <button onClick={restartGame} className="restart-button">
            –°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      ) : (
        <div>
          <p className="score">–°—á—ë—Ç: {score}</p>
          <div className="timer-container">
            <p className="time">–í—Ä–µ–º—è: {timeLeft} —Å–µ–∫</p>
            <div className="progress-bar">
              <div
                className="progress-bar-fill"
                style={{ width: `${(timeLeft / 60) * 100}%` }}
              ></div>
            </div>
          </div>
          <h2 className="question">{questionsDota[questionIndices[currentQuestionIndex]].question}</h2>
          <input
            type="text"
            value={userAnswer}
            onChange={(e) => setUserAnswer(e.target.value)}
            onKeyPress={handleKeyPress}
            className="answer-input"
            placeholder="–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç, –º–∏–ª–∞—à–∫–∞! :3"
          />
          {errorMessage && <p className="error-message">{errorMessage}</p>}
          <button onClick={handleAnswer} className="submit-button">
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      )}
    </div>
  );
}

export default App;